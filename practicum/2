#!/usr/bin/env python3

import pyglet, sys
from pyglet.gl import *
from pyglet.window import Window, key, mouse
import numpy as np

from pyglet.math import Mat4, Vec3
import ctypes

# https://docs.python.org/3/library/dataclasses.html
# for a quick and dirty c-like struct
from dataclasses import dataclass

@dataclass
class Pos:
    x: float
    y: float 
    orientation: int = 1
    w: float = 30   
    h: float = 30*2/np.sqrt(3.0)
    
    def __add__(self, other):
        if isinstance(other, Pos):
            self.x += other.x
            self.y += other.y

    def vertices(self) -> tuple:
        """
            a
           b c
         -- or --
           b c
            a
        """
        # the points of the triangles above
        b = self.x - self.w / 2.0
        c = self.x + self.w / 2.0
        a = self.y + self.h * self.orientation
        
        return ( (b, self.y, 0.0), (c, self.y, 0.0), (self.x, a, 0.0) )

class Scene(Window):
    def __init__(self, width, height, ):
        super().__init__(width=width, height=height, resizable=True,
                         caption='Practicum') 
        glEnable(GL_BLEND)
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)

        self.sliding = False
        self.rotating = False

        self.p1 = self.p2 = np.array([0,0])
        self.translate = np.array([0,0])
        self.scale = np.array([0,0,1,1])
        self.arcball = Mat4.from_rotation(0.0, Vec3(0,0,0))

        # position of the spaceship
        self.pos = Pos(self.width / 2.0, 50) # just need to define x & y
        self.hp  = 100

        # position of the enemies
        self.enemies = []

    def z(self,x,y,radius=None):
        if radius is None:
            r1 = self.height / 2.0
            r2 = self.width / 2.0
        else:
            r1 = r2 = radius

        condition = pow(x-r1, 2) + pow(y-r2, 2)
        check = pow(r2, 2)
        if condition < check:
            return np.sqrt(check - condition)
        else:
            return 0.1

    def gen(self, start, stop, step):
        while start < stop:
            yield start
            start += step


    def on_key_press(self, symbol, modifiers):
        if symbol == key.C and modifiers == key.MOD_CTRL:
            print('exiting...')
            sys.exit(0)
        if symbol == key.SPACE:
            # shoot a lazer
            pass

    def on_mouse_press(self, x, y, symbol, modifiers):
        if symbol == mouse.LEFT:
            self.p1 = self.p2 = np.array([x,y])
            self.sliding = True
        elif symbol == mouse.RIGHT:
            self.p1 = self.p2 = np.array([x,y,self.z(x,y)])
            self.rotating = True

    def on_mouse_drag(self, x, y, dx, dy, buttons, modifiers):
        if self.sliding:
            self.p2 = np.array([x,y])
        elif self.rotating:
            self.p2 = np.array([x,y,self.z(x,y)])
            
            det = np.linalg.norm(self.p1) * np.linalg.norm(self.p2)
            
            # was having floating point precision errors that led to the value growing greater than 1
            theta = np.arccos( round(np.dot(self.p1, self.p2) / det, 5) ) 

            u = np.cross(self.p1, self.p2) / det
            norm = np.linalg.norm(u)
            u /= norm if norm != 0 else 1 

            self.arcball = self.arcball.rotate(theta, Vec3(*u)) 
            
            self.p1 = self.p2
            

    def on_mouse_release(self, x, y, symbol, modifiers):
        if self.sliding: 
            self.translate += self.p2 - self.p1
            self.p1 = self.p2 = np.array([0,0])
            self.sliding = False
        elif self.rotating:
            self.p1 = self.p2 = np.array([0,0])
            self.rotating = False

    def on_mouse_scroll(self, x, y, scrollx, scrolly):
        factor = 1.1 if scrolly > 0 else 0.9
        self.scale = factor * self.scale
        self.scale[0:2] = [x, y]

    def on_draw(self, dt=0):            

        # clear the screen
        self.clear()

        # set viewport and frustum
        glViewport(0,0, self.width, self.height)
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        scale = 10.0
        glFrustum(-scale, scale, -scale, scale, 5.0, 10000.0)
        glMatrixMode(GL_MODELVIEW)

        # set environment to handle depth
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

        # draw the stuff
        glLoadIdentity()

        # translate the matrix based on the left mouse click
        tx,ty = (self.translate + ((self.p2 - self.p1) if self.sliding else np.array([0,0])))
        glTranslatef(tx, ty, -100.0)
        
        # scale the world around the cursor based on the scroll wheel
        tsx, tsy, sx, sy = self.scale
        
        glScalef(sx, sy, sy)
        
        # draw the hp bar
        left, right, y = self.pos.x - self.pos.w / 2.0, self.pos.x + self.pos.w / 2.0, self.pos.y 
            
        glBegin(GL_LINES)
        glLineWidth(5.0)
        # put the red one as a background 
        glColor4f(1.0,0.0,0.0,1.0)
        glVertex3f(left, y, 0.0) 
        glVertex3f(right, y, 0.0) 

        # put the green "health" bar in 
        glColor4f(0.0,1.0,0.0,0.0)
        glVertex3f(left, y, 0.0) 
        glVertex3f(left + (self.hp / 100.0)*(self.pos.w), y, 0.0) # some percentage along the width 

        glEnd()

        # reset the line width
        glLineWidth(1.0)

        # draw the player
        glColor4f(0.0,1.0,0.0,1.0)
        glBegin(GL_TRIANGLES)
        for vertex in self.pos.vertices():
            glVertex3f(*vertex)
        glEnd()

        # draw any lasers 

        # draw the enemies
        glColor4f(1.0, 0.0, 0.0, 1.0)
        for enemy in self.enemies:
            glBegin(GL_TRIANGLES)
            
            for vertex in enemy.vertices():
                glVertex3f(*vertex)

            glEnd()
        

        
if __name__ == '__main__':

    scene = Scene(500, 500)
    pyglet.app.run()



